(****************************************************************
 * Identifiers of builtin function, types, etc.
 *
 * Copyright (C) 2022-2025 Intel Corporation
 * SPDX-Licence-Identifier: BSD-3-Clause
 ****************************************************************)

(* Functions *)
let not_bool          = Ident.mk_fident "asl_not_bool"
let neg_int           = Ident.mk_fident "asl_neg_int"
let not_bits          = Ident.mk_fident "asl_not_bits"
let zeros_bits        = Ident.mk_fident "asl_zeros_bits"
let ones_bits         = Ident.mk_fident "asl_ones_bits"
let lazy_and_bool     = Ident.mk_fident "asl_lazy_and_bool"
let strict_and_bool   = Ident.mk_fident "asl_strict_and_bool"
let lazy_or_bool      = Ident.mk_fident "asl_lazy_or_bool"
let strict_or_bool    = Ident.mk_fident "asl_strict_or_bool"
let implies_bool      = Ident.mk_fident "asl_implies_bool"
let eq_enum           = Ident.mk_fident "asl_eq_enum"
let eq_int            = Ident.mk_fident "asl_eq_int"
let le_int            = Ident.mk_fident "asl_le_int"
let add_int           = Ident.mk_fident "asl_add_int"
let sub_int           = Ident.mk_fident "asl_sub_int"
let mul_int           = Ident.mk_fident "asl_mul_int"
let eq_bits           = Ident.mk_fident "asl_eq_bits"
let add_bits          = Ident.mk_fident "asl_add_bits"
let sub_bits          = Ident.mk_fident "asl_sub_bits"
let mul_bits          = Ident.mk_fident "asl_mul_bits"
let in_mask           = Ident.mk_fident "asl_in_mask"
let and_bits          = Ident.mk_fident "asl_and_bits"
let or_bits           = Ident.mk_fident "asl_or_bits"
let lsr_bits          = Ident.mk_fident "asl_lsr_bits"
let lsl_bits          = Ident.mk_fident "asl_lsl_bits"
let eq_bool           = Ident.mk_fident "asl_eq_bool"
let ne_bool           = Ident.mk_fident "asl_ne_bool"
let ne_enum           = Ident.mk_fident "asl_ne_enum"
let align_int         = Ident.mk_fident "asl_align_int"
let exact_div_int     = Ident.mk_fident "asl_exact_div_int"
let fdiv_int          = Ident.mk_fident "asl_fdiv_int"
let frem_int          = Ident.mk_fident "asl_frem_int"
let ge_int            = Ident.mk_fident "asl_ge_int"
let gt_int            = Ident.mk_fident "asl_gt_int"
let is_pow2_int       = Ident.mk_fident "asl_is_pow2_int"
let lt_int            = Ident.mk_fident "asl_lt_int"
let mod_pow2_int      = Ident.mk_fident "asl_mod_pow2_int"
let ne_int            = Ident.mk_fident "asl_ne_int"
let pow2_int          = Ident.mk_fident "asl_pow2_int"
let pow_int_int       = Ident.mk_fident "asl_pow_int_int"
let shl_int           = Ident.mk_fident "asl_shl_int"
let shr_int           = Ident.mk_fident "asl_shr_int"
let zdiv_int          = Ident.mk_fident "asl_zdiv_int"
let zrem_int          = Ident.mk_fident "asl_zrem_int"
let add_real          = Ident.mk_fident "asl_add_real"
let cvt_int_real      = Ident.mk_fident "asl_cvt_int_real"
let divide_real       = Ident.mk_fident "asl_divide_real"
let eq_real           = Ident.mk_fident "asl_eq_real"
let ge_real           = Ident.mk_fident "asl_ge_real"
let gt_real           = Ident.mk_fident "asl_gt_real"
let le_real           = Ident.mk_fident "asl_le_real"
let lt_real           = Ident.mk_fident "asl_lt_real"
let mul_real          = Ident.mk_fident "asl_mul_real"
let ne_real           = Ident.mk_fident "asl_ne_real"
let neg_real          = Ident.mk_fident "asl_neg_real"
let pow2_real         = Ident.mk_fident "asl_pow2_real"
let round_down_real   = Ident.mk_fident "asl_round_down_real"
let round_tozero_real = Ident.mk_fident "asl_round_tozero_real"
let round_up_real     = Ident.mk_fident "asl_round_up_real"
let sqrt_real         = Ident.mk_fident "asl_sqrt_real"
let sub_real          = Ident.mk_fident "asl_sub_real"
let cvt_bits_sint     = Ident.mk_fident "asl_cvt_bits_sint"
let cvt_bits_uint     = Ident.mk_fident "asl_cvt_bits_uint"
let cvt_int_bits      = Ident.mk_fident "asl_cvt_int_bits"
let xor_bits          = Ident.mk_fident "asl_xor_bits"
let frem_bits_int     = Ident.mk_fident "asl_frem_bits_int"
let notin_mask        = Ident.mk_fident "asl_notin_mask"
let asr_bits          = Ident.mk_fident "asl_asr_bits"
let ne_bits           = Ident.mk_fident "asl_ne_bits"
let replicate_bits    = Ident.mk_fident "asl_replicate_bits"
let append_str_str    = Ident.mk_fident "asl_append_str_str"
let cvt_bits_str      = Ident.mk_fident "asl_cvt_bits_str"
let cvt_bool_str      = Ident.mk_fident "asl_cvt_bool_str"
let cvt_int_decstr    = Ident.mk_fident "asl_cvt_int_decstr"
let cvt_int_hexstr    = Ident.mk_fident "asl_cvt_int_hexstr"
let cvt_real_str      = Ident.mk_fident "asl_cvt_real_str"
let eq_str            = Ident.mk_fident "asl_eq_str"
let ne_str            = Ident.mk_fident "asl_ne_str"
let ram_init          = Ident.mk_fident "asl_ram_init"
let ram_read          = Ident.mk_fident "asl_ram_read"
let ram_write         = Ident.mk_fident "asl_ram_write"
let add_bits_int      = Ident.mk_fident "asl_add_bits_int"
let sub_bits_int      = Ident.mk_fident "asl_sub_bits_int"
let mul_bits_int      = Ident.mk_fident "asl_mul_bits_int"
let zero_extend_bits  = Ident.mk_fident "asl_zero_extend_bits"
let sign_extend_bits  = Ident.mk_fident "asl_sign_extend_bits"
let append_bits       = Ident.mk_fident "asl_append_bits"
let mk_mask           = Ident.mk_fident "asl_mk_mask"
let mask_int          = Ident.mk_fident "asl_mask_int"

let sintN              = Ident.mk_ident "__sint"
let eq_sintN           = Ident.mk_fident "asl_eq_sintN"
let ne_sintN           = Ident.mk_fident "asl_ne_sintN"
let gt_sintN           = Ident.mk_fident "asl_gt_sintN"
let ge_sintN           = Ident.mk_fident "asl_ge_sintN"
let le_sintN           = Ident.mk_fident "asl_le_sintN"
let lt_sintN           = Ident.mk_fident "asl_lt_sintN"
let add_sintN          = Ident.mk_fident "asl_add_sintN"
let neg_sintN          = Ident.mk_fident "asl_neg_sintN"
let sub_sintN          = Ident.mk_fident "asl_sub_sintN"
let shl_sintN          = Ident.mk_fident "asl_shl_sintN"
let shr_sintN          = Ident.mk_fident "asl_shr_sintN"
let mul_sintN          = Ident.mk_fident "asl_mul_sintN"
let exact_div_sintN    = Ident.mk_fident "asl_exact_div_sintN"
let zdiv_sintN         = Ident.mk_fident "asl_zdiv_sintN"
let zrem_sintN         = Ident.mk_fident "asl_zrem_sintN"
let fdiv_sintN         = Ident.mk_fident "asl_fdiv_sintN"
let frem_sintN         = Ident.mk_fident "asl_frem_sintN"
let is_pow2_sintN      = Ident.mk_fident "asl_is_pow2_sintN"
let pow2_sintN         = Ident.mk_fident "asl_pow2_sintN"
let align_sintN        = Ident.mk_fident "asl_align_sintN"
let mod_pow2_sintN     = Ident.mk_fident "asl_mod_pow2_sintN"
let cvt_sintN_bits     = Ident.mk_fident "asl_cvt_sintN_bits"
let cvt_bits_ssintN    = Ident.mk_fident "asl_cvt_bits_ssintN"
let cvt_bits_usintN    = Ident.mk_fident "asl_cvt_bits_usintN"
let cvt_sintN_int      = Ident.mk_fident "asl_cvt_sintN_int"
let cvt_int_sintN      = Ident.mk_fident "asl_cvt_int_sintN"
let resize_sintN       = Ident.mk_fident "asl_resize_sintN"
let print_sintN_dec    = Ident.mk_fident "print_sintN_dec"
let print_sintN_hex    = Ident.mk_fident "print_sintN_hex"

let len               = Ident.mk_fident "Len"
let max               = Ident.mk_fident "Max"
let min               = Ident.mk_fident "Min"
let zero_extend       = Ident.mk_fident "ZeroExtend"
let ones              = Ident.mk_fident "Ones"
let zeros             = Ident.mk_fident "Zeros"
let is_ones           = Ident.mk_fident "IsOnes"
let is_zero           = Ident.mk_fident "IsZero"

let asl_reset                = Ident.mk_fident "ASL_Reset"
let asl_step                 = Ident.mk_fident "ASL_Step"
let asl_get_pc               = Ident.mk_fident "ASL_GetPC"
let asl_set_pc               = Ident.mk_fident "ASL_SetPC"
let asl_elf_write_memory8    = Ident.mk_fident "ASL_WriteMemory8"

let asl_fake_return_value    = Ident.mk_ident "ASL_fake_return_value"
let asl_error_unmatched_case = Ident.mk_fident "ASL_error_unmatched_case"
let asl_assert               = Ident.mk_fident "asl_assert"
let asl_insert_bits          = Ident.mk_fident "asl_bits_set"
let asl_extract_bits         = Ident.mk_fident "asl_extract_bits"
let asl_extract_int          = Ident.mk_fident "asl_extract_int"
let asl_end_execution        = Ident.mk_fident "asl_end_execution"
let asl_file_open            = Ident.mk_fident "asl_file_open"
let asl_file_write           = Ident.mk_fident "asl_file_write"
let asl_file_getc            = Ident.mk_fident "asl_file_getc"
let asl_fuzz                 = Ident.mk_fident "ASL_fuzz"

let trace_next            = Ident.mk_fident "__TraceNext"
let trace_physical_memory = Ident.mk_fident "__TracePhysicalMemory"
let trace_virtual_memory  = Ident.mk_fident "__TraceVirtualMemory"
let trace_page_table_walk = Ident.mk_fident "__TracePageTableWalk"
let trace_error           = Ident.mk_fident "__TraceError"
let trace_event           = Ident.mk_fident "__TraceEvent"

let print_int_hex     = Ident.mk_fident "print_int_hex"
let print_int_dec     = Ident.mk_fident "print_int_dec"
let print_char        = Ident.mk_fident "print_char"
let print_str         = Ident.mk_fident "print_str"
let print_bits_hex    = Ident.mk_fident "print_bits_hex"
let print_bits        = Ident.mk_fident "print_bits"
let print_boolean     = Ident.mk_fident "asl_print_bool"

let print             = Ident.mk_fident "Print"

(* Other identifiers *)
let boolean_ident   = Ident.mk_ident "boolean"
let integer_ident   = Ident.mk_ident "integer"
let string_ident    = Ident.mk_ident "string"
let real_ident      = Ident.mk_ident "real"
let bits_ident      = Ident.mk_ident "bits"
let wildcard_ident  = Ident.mk_ident "_"
let dash_ident      = Ident.mk_ident "-"
let mask_ident      = Ident.mk_ident "__mask"
let asl_integer     = Ident.mk_ident "integer"
let ram             = Ident.mk_ident "__RAM"
let true_ident      = Ident.mk_ident "TRUE"
let false_ident     = Ident.mk_ident "FALSE"

(****************************************************************
 * End
 ****************************************************************)
